## arguments we want to run parrot with
PARROT_ARGS   =

## configuration settings
VERSION_DIR   = @versiondir@
BIN_DIR       = @bin_dir@
LIB_DIR       = @lib_dir@$(VERSION_DIR)
DOC_DIR       = @doc_dir@$(VERSION_DIR)
MANDIR        = @mandir@$(VERSION_DIR)

# Set up extensions
LOAD_EXT      = @load_ext@
O             = @o@
EXE           = @exe@

# Set up directories
BUILD_DIR     = @build_dir@
LIBRARY_DIR   = $(BUILD_DIR)/runtime/parrot/library
PMC_DIR       = src/pmc
DYNEXT_DIR    = dynext

# Set up commands
MAKE          = @make_c@
PARROT        = $(BUILD_DIR)/parrot@exe@
PERL          = @perl@
CHMOD         = @chmod@
CP            = @cp@
MKPATH        = @mkpath@
RM_F          = @rm_f@
NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)

PIPP_GROUP    = $(DYNEXT_DIR)/pipp_group$(LOAD_EXT)

PMC_DEPS      = \
  $(PMC_DIR)/php.pmc \
  $(PMC_DIR)/phparray.pmc \
  $(PMC_DIR)/phpboolean.pmc \
  $(PMC_DIR)/phpfloat.pmc \
  $(PMC_DIR)/phpinteger.pmc \
  $(PMC_DIR)/phpresource.pmc \
  $(PMC_DIR)/phpstring.pmc \
  $(PMC_DIR)/phpnull.pmc

INTERNALS_PIR = \
  src/classes/Object.pir

PHP_SRC_STD_EXT = \
  src/common/php_API.pir \
  src/common/php_array.pir \
  src/common/php_assert.pir \
  src/common/php_base64.pir \
  src/common/php_basic.pir \
  src/common/php_builtin.pir \
  src/common/php_browscap.pir \
  src/common/php_crc32.pir \
  src/common/php_crypt.pir \
  src/common/php_cyr_convert.pir \
  src/common/php_datetime.pir \
  src/common/php_dir.pir \
  src/common/php_dl.pir \
  src/common/php_dns.pir \
  src/common/php_exec.pir \
  src/common/php_file.pir \
  src/common/php_filestat.pir \
  src/common/php_filesystem.pir \
  src/common/php_formatted_print.pir \
  src/common/php_fsock.pir \
  src/common/php_ftok.pir \
  src/common/php_head.pir \
  src/common/php_html.pir \
  src/common/php_http.pir \
  src/common/php_image.pir \
  src/common/php_info.pir \
  src/common/php_iptc.pir \
  src/common/php_lcg.pir \
  src/common/php_levenshtein.pir \
  src/common/php_link.pir \
  src/common/php_mail.pir \
  src/common/php_math.pir \
  src/common/php_md5.pir \
  src/common/php_metaphone.pir \
  src/common/php_microtime.pir \
  src/common/php_pack.pir \
  src/common/php_pageinfo.pir \
  src/common/php_proc_open.pir \
  src/common/php_quot_print.pir \
  src/common/php_rand.pir \
  src/common/php_reg.pir \
  src/common/php_sha1.pir \
  src/common/php_soundex.pir \
  src/common/php_streamsfuncs.pir \
  src/common/php_string.pir \
  src/common/php_syslog.pir \
  src/common/php_type.pir \
  src/common/php_uniqid.pir \
  src/common/php_url.pir \
  src/common/php_user_filters.pir \
  src/common/php_uuencode.pir \
  src/common/php_var.pir \
  src/common/php_versioning.pir

PHP_EXT = \
  library/php_ctype.pbc \
  library/php_gmp.pbc \
  library/php_pcre.pbc

# default
all: pipp$(EXE)

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "Building:"
	@echo "  all:               Build pipp.pbc"
	@echo "                     This is the default."
	@echo "  pipp$(EXE):        A fancy executable."
	@echo ""
	@echo "Testing:"
	@echo "  test:              Run the test suite for Pipp."
	@echo "  test-all:          Run the test suite for reference implementation and for Pipp."
	@echo "  test-php:          Run the test suite for the reference implementation."
	@echo "  smoke:             Run the test suite and send report to the smolder server"
	@echo "  codetest:          Run file metadata and coding standards tests."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Clean up."
	@echo "  clean-test:        Clean up temporary files from testing."
	@echo "  clean-pmc:         Clean up temporary files from the PMC build process."
	@echo "  realclean:         Clean and remove Makefile."
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

# regenerate the Makefile
Makefile: build/templates/Makefile.in
	$(PERL) Configure.pl


# Target for building a standalone Pipp.
#pipp$(EXE): library/pipplib.pbc pipp.pbc $(PHP_EXT) Test.pir
pipp.pbc: $(PIPP_GROUP) library/pipplib.pbc $(PHP_EXT)

pipp$(EXE): pipp.pbc
	$(PBC_TO_EXE) pipp.pbc

$(PIPP_GROUP): $(PMC_DEPS) 
	$(MAKE) $(PMC_DIR) build

library/pipplib.pbc: \
  src/common/builtins.pir \
  src/common/guts.pir \
  src/common/eval.pir \
  src/common/php_standard.pir \
  $(INTERNALS_PIR) \
  $(PHP_SRC_STD_EXT) \
  src/common/php_API.pir \
  src/common/php_MACRO.pir
	$(PARROT) -o library/pipplib.pbc src/common/builtins.pir

library/php_ctype.pbc: src/common/php_ctype.pir src/common/php_MACRO.pir
	$(PARROT) -o library/php_ctype.pbc src/common/php_ctype.pir

library/php_gmp.pbc: src/common/php_gmp.pir src/common/php_MACRO.pir
	$(PARROT) -o library/php_gmp.pbc src/common/php_gmp.pir

library/php_pcre.pbc: src/common/php_pcre.pir src/common/php_MACRO.pir
	$(PARROT) -o library/php_pcre.pbc src/common/php_pcre.pir

src/pct/gen_grammar.pir: $(LIBRARY_DIR)/PGE/Perl6Grammar.pir src/pct/grammar.pg
	$(PARROT) $(LIBRARY_DIR)/PGE/Perl6Grammar.pir \
            --output=src/pct/gen_grammar.pir src/pct/grammar.pg

src/pct/gen_actions.pir: $(NQP) $(PCT) src/pct/actions.pm
	$(PARROT) $(NQP) --output=src/pct/gen_actions.pir --target=pir src/pct/actions.pm

pipp.pbc: \
  pipp.pir \
  src/pct/gen_grammar.pir \
  src/pct/gen_actions.pir \
  src/pct/quote_expression.pir
	$(PARROT) -o pipp.pbc pipp.pir

Test.pir: Test.php pipp.pbc
	$(PARROT) pipp.pbc --target=pir --output=Test.pir Test.php

installable: installable_pipp@exe@

installable_pipp@exe@: pipp.pbc
	$(PBC_TO_EXE) pipp.pbc --install

install: installable
#	$(MAKE) $(OPS_DIR) install
	$(MAKE) $(PMC_DIR) install
	$(CP) installable_pipp@exe@ $(BIN_DIR)/parrot-pipp@exe@
	$(CHMOD) 0755 $(BIN_DIR)/parrot-pipp@exe@
	-$(MKPATH) $(LIB_DIR)/languages/pipp
	$(CP) pipp.pbc $(LIB_DIR)/languages/pipp/pipp.pbc
	-$(MKPATH) $(LIB_DIR)/languages/pipp/library
	$(CP) library/*.pbc $(LIB_DIR)/languages/pipp/library
	-$(MKPATH) $(LIB_DIR)/languages/pipp/dynext
	$(CP) dynext/*$(LOAD_EXT) $(LIB_DIR)/languages/pipp/dynext

#	-$(MKPATH) $(MANDIR)/man1
#	$(POD2MAN) doc/running.pod > $(MANDIR)/man1/parrot-pipp.1
#	-$(MKPATH) $(DOC_DIR)/languages/pipp
#	$(CP) $(DOCS) $(DOC_DIR)/languages/pipp

win32-inno-installer: installable
#	-$(MKPATH) man/man1
#	$(POD2MAN) doc/running.pod > man/man1/parrot-pipp.1
#	-$(MKPATH) man/html
#	pod2html --infile doc/running.pod --outfile man/html/parrot-pipp.html
	$(CP) installable_pipp@exe@ parrot-pipp.exe
	$(PERL) $(LIB_DIR)/tools/dev/mk_inno_language.pl pipp
	iscc parrot-pipp.iss

test:     all
	- $(PERL) t/harness

test-all: all test-php test

test-php:
	- $(PERL) t/harness --with-php

# run the test suite, create a TAP archive and send it off to smolder
smolder_test : smoke
smoke : all
	- $(PERL) t/harness --archive --send-to-smolder


# make sure debugging output is disabled while running the tests
export PMCDEBUG=

# this does not work yet
test-pcc-testsuite: all t/pcc-testsuite
	cd t/pcc-testsuite && svn up
	cd t/pcc-testsuite && php dotest.php -d .

t/pcc-testsuite:
	svn co http:////code.roadsend.com//svn//pcc//trunk//pcc-testsuite t/pcc-testsuite

# this does not work yet
# Make sue that php 5.3 is in $PATH,
# e.g export PATH=~/devel/PHP/php5/sapi/cli:$PATH
test-php-qa-testsuite: pipp \
  t/php_qa_testsuite/php5/run-tests.php \
  t/php_qa_testsuite/php5/tests
 #t/php_qa_testsuite/php5/Zend/tests
	cd t/php_qa_testsuite/php5 && cvs update tests run-tests.php
	cd t/php_qa_testsuite/php5 && \
 TEST_PHP_EXECUTABLE=pipp \
 TEST_PHP_CGI_EXECUTABLE=pipp \
 php run-tests.php -v --keep-all | tee run_tests.log

t/php_qa_testsuite/php5/run-tests.php:
	cd t/php_qa_testsuite && cvs -d :pserver:cvsread@cvs.php.net:/repository checkout -r PHP_5_3 php5/run-tests.php

t/php_qa_testsuite/php5/tests:
	cd t/php_qa_testsuite && cvs -d :pserver:cvsread@cvs.php.net:/repository checkout -r PHP_5_3 php5/tests

#t/php_qa_testsuite/php5/Zend/tests:
	#cd php_qa_testsuite && cvs -d :pserver:cvsread@cvs.php.net:/repository/ZendEngine2 checkout -r PHP_5_3 php5/Zend/tests

codetest: codetest-c codetest-make codetest-perl codetest-pir codetest-pod

T_C     = src//pmc//*.pmc src//pmc//pipp_private.h src//pmc//pipp_hash.c src//pmc//pipp_hash.h
T_MAKE  = config//makefiles//root.in
T_PERL  = Configure.pl t//harness t//php//*.t src//build//genskel.pl \
          lib//Parrot//Test//*.pm lib//Parrot//Test//Pipp//*.pm
T_PIR   = *.pir src//classes//*.pir src//common//*.pir src//pct//quote_expression.pir
T_POD   = docs//*.pod

codetest-c:
	- $(PERL) @build_dir@/t/codingstd/c_code_coda.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/c_cppcomments.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/c_indent.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/c_macro_args.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/c_operator.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/c_parens.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/c_returns.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/copyright.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/cuddled_else.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/filenames.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/linelength.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/svn_id.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/tabs.t $(T_C)
	- $(PERL) @build_dir@/t/codingstd/trailing_space.t $(T_C)

codetest-make:
	- $(PERL) @build_dir@/t/codingstd/copyright.t $(T_MAKE)
	- $(PERL) @build_dir@/t/codingstd/filenames.t $(T_MAKE)
	- $(PERL) @build_dir@/t/codingstd/make_code_coda.t $(T_MAKE)
	- $(PERL) @build_dir@/t/codingstd/linelength.t $(T_MAKE)
	- $(PERL) @build_dir@/t/codingstd/svn_id.t $(T_MAKE)
	- $(PERL) @build_dir@/t/codingstd/trailing_space.t $(T_MAKE)

codetest-perl:
#	- $(PERL) @build_dir@/t/codingstd/copyright.t $(T_PERL)
	- $(PERL) @build_dir@/t/codingstd/cuddled_else.t $(T_PERL)
	- $(PERL) @build_dir@/t/codingstd/filenames.t $(T_PERL)
#	- $(PERL) @build_dir@/t/codingstd/linelength.t $(T_PERL)
	- $(PERL) @build_dir@/t/codingstd/perlcritic.t $(T_PERL)
	- $(PERL) @build_dir@/t/codingstd/svn_id.t $(T_PERL)
	- $(PERL) @build_dir@/t/codingstd/trailing_space.t $(T_PERL)

codetest-pir:
#	- $(PERL) @build_dir@/t/codingstd/copyright.t $(T_PIR)
	- $(PERL) @build_dir@/t/codingstd/filenames.t $(T_PIR)
#	- $(PERL) @build_dir@/t/codingstd/linelength.t $(T_PIR)
	- $(PERL) @build_dir@/t/codingstd/pir_code_coda.t $(T_PIR)
	- $(PERL) @build_dir@/t/codingstd/svn_id.t $(T_PIR)
	- $(PERL) @build_dir@/t/codingstd/tabs.t $(T_PIR)
	- $(PERL) @build_dir@/t/codingstd/trailing_space.t $(T_PIR)

codetest-pod:
#	- $(PERL) @build_dir@/t/codingstd/copyright.t $(T_POD)
	- $(PERL) @build_dir@/t/codingstd/linelength.t $(T_POD)
	- $(PERL) @build_dir@/t/codingstd/svn_id.t $(T_POD)
	- $(PERL) @build_dir@/t/codingstd/tabs.t $(T_POD)
	- $(PERL) @build_dir@/t/codingstd/trailing_space.t $(T_POD)
	- $(PERL) @build_dir@/t/doc/pod.t $(T_POD)

# cleaning up
clean: clean-pmc clean-test clean-hash
	$(RM_F) \
  library/*.pbc \
  src/pct/gen_grammar.pir \
  src/pct/gen_actions.pir \
  pipp.pbc \
  pipp.c \
  pipp.$(O) \
  pipp$(EXE)

clean-pmc:
	$(MAKE) $(PMC_DIR) clean

clean-test:
	$(RM_F) \
  t/php/*.php \
  t/php/*.pir \
  t/php/*.out \
  t/pmc/*.pir \
  pipp_test_run.tar.gz

clean-hash:
	$(RM_F) "$(HASH_OBJS)"

realclean: clean
	$(RM_F) Makefile

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:
