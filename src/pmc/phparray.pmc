/*

=head1 NAME

pmc/phparray.pmc - PHP Array

=head1 DESCRIPTION

C<PhpArray> implements C<OrderedHash> to provide Pipp-specific
array behavior.

=head2 Methods

=over 4

=cut

*/
#include "pipp_private.h"
STRING* arrkeyfromint(PARROT_INTERP, INTVAL idx);
STRING* arrkeyfromint(PARROT_INTERP, INTVAL idx) {
    STRING * const fmt = CONST_STRING(interp, "\1%d");
    STRING * const key = Parrot_sprintf_s(interp, fmt, idx);
    return key;
}


pmclass PhpArray 
        need_ext
        dynpmc
        provides array 
        provides hash 
        auto_attrs
        maps    ResizablePMCArray
        maps    Hash
        group    pipp_group
        hll      PHP 
        extends  OrderedHash {
    
    ATTR PMC *ptr; /* pointer */

/*

=item C<void init()>

Create new instance of PhpArray

=cut

*/
    VTABLE STRING *get_repr() {
        Parrot_PhpArray_attributes * const attrs =
            (Parrot_PhpArray_attributes*) PMC_data(SELF);
        
        PMC * const iter = SELF.get_iter();
        PMC * const sb   = Parrot_pmc_new(INTERP, enum_class_StringBuilder);
        const INTVAL n   = VTABLE_elements(INTERP, SELF);

        VTABLE_set_integer_native(INTERP, iter, ITERATE_FROM_START);
        while (VTABLE_get_bool(INTERP, iter)) {
            PMC * const item = VTABLE_shift_pmc(INTERP, iter);
            //PMC * const item = SELF.get_pmc_keyed(hashkey);
            STRING *repr = VTABLE_get_repr(INTERP, item);
            char *cstring = Parrot_str_to_cstring(INTERP, repr);
            char *swhoami = Parrot_str_to_cstring(INTERP, item->vtable->whoami);
            fprintf(stderr, "%s%s%s%s%s", "Item(", swhoami, "): ", cstring, "\n");
            Parrot_str_free_cstring(cstring);
            Parrot_str_free_cstring(swhoami);
            
            
            PMC *prev = VTABLE_get_pmc_keyed_int(INTERP, item,
                    ORDERED_HASH_ITEM_PREV);
            if (PMC_IS_NULL(prev)) {
                VTABLE_push_string(INTERP, sb, CONST_STRING(INTERP, "{"));
            }
            STRING * const key = VTABLE_get_string(INTERP, VTABLE_get_pmc_keyed_int(INTERP, item,
                    ORDERED_HASH_ITEM_KEY));
            const INTVAL   len = STRING_length(key);
            const INTVAL   idx = STRING_find_not_cclass(interp, enum_cclass_numeric,
                                         key, 0, len);

            if (idx >= len) {
                /* Only digits */
                VTABLE_push_string(INTERP, sb, key);
            }
            else {
                VTABLE_push_string(INTERP, sb, CONST_STRING(INTERP, "'"));
                VTABLE_push_string(INTERP, sb, key);
                VTABLE_push_string(INTERP, sb, CONST_STRING(INTERP, "'"));
            }
            
            PMC * const val = VTABLE_get_pmc_keyed_int(INTERP, item,
                    ORDERED_HASH_ITEM_VALUE);
            
            VTABLE_push_string(INTERP, sb, CONST_STRING(INTERP, ":"));
            VTABLE_push_string(INTERP, sb, VTABLE_get_repr(INTERP, val));
            if (PMC_IS_NULL(VTABLE_get_pmc_keyed_int(INTERP, item,
                    ORDERED_HASH_ITEM_PREV))) {
                VTABLE_push_string(INTERP, sb, CONST_STRING(INTERP, "}"));
            } else {
                VTABLE_push_string(INTERP, sb, CONST_STRING(INTERP, ","));
            }
        }
        STRING *repr = VTABLE_get_string(INTERP, sb);
        char *cstring = Parrot_str_to_cstring(INTERP, repr);
        fprintf(stderr, "%s", cstring);
        Parrot_str_free_cstring(cstring);
        return repr;
    }
    
    VTABLE void init() {
        Parrot_PhpArray_attributes * const attrs =
            (Parrot_PhpArray_attributes*) PMC_data(SELF);
        attrs->hash = Parrot_pmc_new(INTERP, enum_class_Hash);
        attrs->first = PMCNULL;
        attrs->last = PMCNULL;
        attrs->ptr = VTABLE_get_iter(INTERP, attrs->hash);
        
        PObj_custom_mark_destroy_SETALL(SELF);
    }


/*

=item C<void init_pmc(PMC *p)>

Initialize this PHPArray with the passed-in PMC C<p>.  If C<p> is a PHPArray,
its contents are copied directly.  If C<p> is a PMC that provides a hash or
array interface, its contents are copied via the appropriate VTABLE functions.
In any other case, an exception will be thrown.

=cut

*/
    VTABLE void init_pmc(PMC *p) {
        if (PMC_IS_NULL(p))
            SELF.init();
        else
            SELF.assign_pmc(p);
    }
    
    
    
    VTABLE PMC *get_pmc_keyed_int(INTVAL idx) {
        PMC *skey = Parrot_pmc_new(INTERP, enum_class_String);
        VTABLE_set_string_native(INTERP, skey, arrkeyfromint(INTERP, idx));
        PMC * const sb   = Parrot_pmc_new(INTERP, enum_class_StringBuilder);
        STRING *repr = VTABLE_get_string(INTERP, sb);
        char *cstring = Parrot_str_to_cstring(INTERP, repr);
        fprintf(stderr, "%s", cstring);
        Parrot_str_free_cstring(cstring);
        return SELF.get_pmc_keyed(skey);
    }
    
    VTABLE void set_pmc_keyed_int(INTVAL idx, PMC *val) {
        PMC *skey = Parrot_pmc_new(INTERP, enum_class_String);
        VTABLE_set_string_native(INTERP, skey, arrkeyfromint(INTERP, idx));
        SELF.set_pmc_keyed(skey, val);
    }
    
    
/*

=item C<INTVAL pop_integer()>

Delete the element at the end of this PHPArray, returning its value as an INTVAL.

=cut

*/
    VTABLE INTVAL pop_integer() {
        PMC * const val = SELF.pop_pmc();
        return VTABLE_get_integer(INTERP, val);
    }

/*

=item C<PMC* pop_pmc()>

Delete the element at the end of this PHPArray, returning its value as a PMC.

=cut

*/
    VTABLE PMC *pop_pmc() {
        //get the last item off the stack
        Parrot_PhpArray_attributes * attrs = 
            (Parrot_PhpArray_attributes*) PMC_data(SELF);
        PMC * retval = VTABLE_get_pmc_keyed_int(INTERP, attrs->last, 
                ORDERED_HASH_ITEM_VALUE);
        //now delete the last item
        PMC * delete_key = VTABLE_get_pmc_keyed_int(INTERP, attrs->last, 
                ORDERED_HASH_ITEM_KEY);
        SELF.delete_keyed(delete_key);
        return retval;
    }

/*

=item C<STRING* pop_string()>

Delete the element at the end of this PHPArray, returning its value as a STRING.

=cut

*/
    VTABLE STRING *pop_string() {
        PMC * const val = SELF.pop_pmc();
        return VTABLE_get_string(INTERP, val);
    }

/*

=item C<FLOATVAL pop_float()>

Delete the element at the end of this PHPArray, returning its value as a FLOATVAL.

=cut

*/
    VTABLE FLOATVAL pop_float() {
        PMC * const val = SELF.pop_pmc();
        return VTABLE_get_number(INTERP, val);
    }

/*

=item C<void unshift_integer(INTVAL i_val)>

Add an integer with the value C<i_val> to the beginning of this PHPArray.
C<i_val> will be keyed by the INTVAL 0 and all other numerically indexed
elements will be renumbered according to insertion order.

=cut

*/
    VTABLE void unshift_integer(INTVAL i_val) {
        PMC *p_val = Parrot_pmc_new(INTERP, enum_class_Integer);
        VTABLE_set_integer_native(INTERP, p_val, i_val);
        SELF.unshift_pmc(p_val);
    }
  
/* 

=item C<void unshift_string(STRING *s_val)>

Add a STRING with the value C<s_val> to the beginning of this PHPArray.
C<s_val> will be keyed by the INTVAL 0 and all other numerically indexed
elements will be renumbered according to insertion order.

=cut

*/
    VTABLE void unshift_string(STRING *s_val) {
        PMC *p_val = Parrot_pmc_new(INTERP, enum_class_String);
        VTABLE_set_string_native(INTERP, p_val, s_val);
        SELF.unshift_pmc(p_val);
    }

/*

=item C<void unshift_float(FLOATVAL f_val)>

Add a FLOATVAL with the value C<f_val> to the beginning of this PHPArray.
C<f_val> will be keyed by the INTVAL 0 and all other numerically indexed
elements will be renumbered according to insertion order.

=cut

*/
    VTABLE void unshift_float(FLOATVAL f_val) {
        PMC *p_val = Parrot_pmc_new(INTERP, enum_class_Float);
        VTABLE_set_number_native(INTERP, p_val, f_val);
        SELF.unshift_pmc(p_val);
    }    
    
    
/*

=item C<void unshift_pmc(PMC *p_val)>

Add a PMC with the value C<p_val> to the beginning of this PHPArray.  C<p_val>
will be keyed by the INTVAL 0 and all other numerically indexed elements will
be renumbered according to insertion order.

=cut

*/
    VTABLE void unshift_pmc(PMC *p_val) {
        Parrot_PhpArray_attributes * attrs = 
            (Parrot_PhpArray_attributes*) PMC_data(SELF);
        int offset = 1; //circumvent pmc2c.pl to eat the value
        PCCINVOKE(INTERP, SELF, "reindex", INTVAL offset);

        //make the new entry
        PMC *list_entry, *skey;
        skey = Parrot_pmc_new(INTERP, enum_class_String);
        VTABLE_set_string_native(INTERP, skey, arrkeyfromint(INTERP, 0));
        list_entry = Parrot_pmc_new_init_int(INTERP, 
                enum_class_FixedPMCArray, ORDERED_HASH_ITEM_MAX);
        VTABLE_set_pmc_keyed_int(INTERP, list_entry, ORDERED_HASH_ITEM_VALUE, 
                p_val);
        VTABLE_set_pmc_keyed_int(INTERP, list_entry, ORDERED_HASH_ITEM_KEY, 
                skey); //phparray.c:857: warning: passing argument 4 of ‘list_entry->vtable->set_pmc_keyed_int’ from incompatible pointer type
        //link it
        VTABLE_set_pmc_keyed_int(INTERP, list_entry, ORDERED_HASH_ITEM_PREV, 
                PMCNULL);
        if (SELF.elements() > 0) {
            VTABLE_set_pmc_keyed_int(INTERP, list_entry, ORDERED_HASH_ITEM_NEXT, 
                    attrs->first);
            //place it in front of the linked list
            VTABLE_set_pmc_keyed_int(INTERP, attrs->first, ORDERED_HASH_ITEM_PREV, 
                list_entry);
        } else {
            VTABLE_set_pmc_keyed_int(INTERP, list_entry, ORDERED_HASH_ITEM_NEXT, 
                    PMCNULL);
        }
        attrs->first = list_entry;
        //store it
        VTABLE_set_pmc_keyed(INTERP, attrs->hash, skey, list_entry);
    }

/*
 
=item C<void reindex(INTVAL offset)>

This function finds all INTEGER keys in a PHPArray and resets them to their
ordered position, with an optional offset (needed for unshifting etc). Elements
do NOT lose their order in the array, but if they have an INTEGER key, the key   
will be reset. (see comments on php.net/unshift for examples)
 */
    METHOD reindex(INTVAL offset) {
        Parrot_PhpArray_attributes * attrs = 
            (Parrot_PhpArray_attributes*) PMC_data(SELF);
        char test[] = "0123456789";
        //find how many numeric keys we have
        INTVAL count = -1; //because we use count as new key and arrays are 0based
        PMC * const iter_find = SELF.get_iter();
        VTABLE_set_integer_native(INTERP, iter_find, ITERATE_FROM_START);
        while(VTABLE_get_bool(INTERP, iter_find)) {
            PMC * const item = VTABLE_shift_pmc(INTERP, iter_find);
            PMC * key = VTABLE_get_pmc_keyed_int(INTERP, item, 
                    ORDERED_HASH_ITEM_KEY);
            char *ckey;
            ckey = Parrot_str_to_cstring(INTERP, VTABLE_get_string(INTERP, key));
            if (strlen(ckey) == strspn(ckey, test)) {
                count++;
            }
            Parrot_str_free_cstring(ckey);
        }
        
        //if count still is -1, we have no INT keys, so we return
        if (-1 == count) return;
        
        /* Now INTVAL(count) knows how many integer keys we have, so lets rewind
         * the PhpArray now, and reset the keys. Because we do it backwards now,
         * we have no issue of creating duplicate keys which would overwrite the
         * array values and just create one big mess
         */
        PMC * const iter = SELF.get_iter();
        VTABLE_set_integer_native(INTERP, iter, ITERATE_FROM_END);//reverse iter
        while (VTABLE_get_bool(INTERP, iter)) {
            PMC * const item = VTABLE_pop_pmc(INTERP, iter);
            PMC * const key = VTABLE_get_pmc_keyed_int(INTERP, item, 
                    ORDERED_HASH_ITEM_KEY);
            char *ckey;
            ckey = Parrot_str_to_cstring(INTERP, VTABLE_get_string(INTERP, key));
            if (strlen(ckey) == strspn(ckey, test)) {
                INTVAL newkey = count + offset;
                PMC *skey;
                skey = Parrot_pmc_new(INTERP, enum_class_String);
                VTABLE_set_string_native(INTERP, skey, arrkeyfromint(INTERP, newkey));
                VTABLE_set_pmc_keyed_int(INTERP, item, ORDERED_HASH_ITEM_KEY, skey);
                count--;
            }

            Parrot_str_free_cstring(ckey);
        }
    }

/*

=item C<INTVAL shift_integer()>

Delete the element at the beginning of this PHPArray, returning its value as an INTVAL.

=cut

*/
    VTABLE INTVAL shift_integer() {
        PMC *p_val;
        p_val = SELF.shift_pmc();
        return VTABLE_get_integer(INTERP, p_val);
    }

/*

=item C<STRING* shift_string()>

Delete the element at the beginning of this PHPArray, returning its value as a STRING.

=cut

*/
    VTABLE STRING *shift_string() {
        PMC *p_val;
        p_val = SELF.shift_pmc();
        return VTABLE_get_string(INTERP, p_val);
    }

/*

=item C<FLOATVAL shift_float()>

Delete the element at the beginning of this PHPArray, returning its value as a FLOATVAL.

=cut

*/
    VTABLE FLOATVAL shift_float() {
        PMC *p_val;
        p_val = SELF.shift_pmc();
        return VTABLE_get_number(INTERP, p_val);
    }


/*

=item C<PMC* shift_pmc()>

Delete the element at the beginning of this PHPArray, returning its value as a PMC.

=cut

*/
    VTABLE PMC *shift_pmc() {
        Parrot_PhpArray_attributes * attrs = 
            (Parrot_PhpArray_attributes*) PMC_data(SELF);
        PMC * retval = VTABLE_get_pmc_keyed_int(INTERP, attrs->first, 
                ORDERED_HASH_ITEM_VALUE);
        PMC * key = VTABLE_get_pmc_keyed_int(INTERP, attrs->first,
                ORDERED_HASH_ITEM_KEY);
        SELF.delete_keyed(key);
        int offset = 0; //circumvent pmc2c.pl to eat the value
        PCCINVOKE(INTERP, SELF, "reindex", INTVAL offset);
        return retval;
    }    
    
/*

=item C<STRING* name()>

Return the string 'array'.

=cut

*/
    VTABLE STRING* name() {
        return Parrot_str_new_constant(INTERP, "array");
    }

/*

=item C<STRING* get_string()>

Return the string 'Array'.

=cut

*/
    VTABLE STRING* get_string() {
        return Parrot_str_new_constant(INTERP, "Array");
    }

/*

=item C<INTVAL get_bool()>

Return 1 if this PHPArray has 1 or more elements.

=cut

*/
    VTABLE INTVAL get_bool() {
        return VTABLE_elements(INTERP, PARROT_ORDEREDHASH(SELF)->hash) > 0;
    }

/*

=item C<void assign_pmc(PMC *src)>

If C<src> is an aggregate PMC (i.e. one that does hash and/or array), use an
Iterator to copy each key/value pair into this PHPArray.  If C<src> is a
PHPArray, just make a clone.

=cut

*/
    VTABLE void assign_pmc(PMC *src) {
        Parrot_PhpArray_attributes * attrs = 
            (Parrot_PhpArray_attributes*) PMC_data(SELF);

        if (src->vtable->base_type == SELF->vtable->base_type) {
            Parrot_PhpArray_attributes *src_attrs =
                (Parrot_PhpArray_attributes*) PARROT_ORDEREDHASH(src);
            Hash * const src_hash = (Hash *)VTABLE_get_pointer(INTERP, src_attrs->hash);
            VTABLE_set_pointer(INTERP, attrs->hash, src_hash);
        } else if (VTABLE_does(INTERP, src, CONST_STRING(INTERP, "array")) ||
                   (VTABLE_does(INTERP, src, CONST_STRING(INTERP, "hash")))) {
            Hash * const my_hash = (Hash *)VTABLE_get_pointer(INTERP, attrs->hash);
        if (my_hash)
            Parrot_hash_destroy(INTERP, my_hash);
            PMC * const iter = VTABLE_get_iter(INTERP, src);

            while (VTABLE_get_bool(INTERP, iter)) {
                PMC    *key        = VTABLE_shift_pmc(INTERP, iter);
                PMC    *value_copy = VTABLE_get_pmc_keyed(INTERP, src, key);
                STRING *key_copy   = VTABLE_get_string(INTERP, key);
                
                SELF.set_pmc_keyed(key, value_copy);
            }
        }
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                    EXCEPTION_PARROT_USAGE_ERROR,
                    "can't assign a non-aggregate PMC to a PhpArray");
    }
/*

=item C<PMC* add(PMC *src, PMC *dest)>

Copy all key/value pairs in C<SELF> and C<src> into C<dest>.  All values in
C<dest> are deleted.  If the same key is in both C<src> and C<SELF>, the value
from C<SELF> will be used.

=cut

*/
    VTABLE PMC *add(PMC *src, PMC *dest) {

        dest = SELF.clone();
        VTABLE_i_add(INTERP, dest, src);

        return dest;
    }
/*

=item C<PMC* i_add(PMC *src)>

Copy all key/value pairs from C<src> into C<SELF>.  If the same key is in both
C<src> and C<SELF>, the value from C<SELF> will be used.

=cut

*/
    VTABLE void i_add(PMC *src) {
if (src->vtable->base_type == SELF->vtable->base_type ||
                VTABLE_does(INTERP, src, CONST_STRING(INTERP, "array")) ||
                VTABLE_does(INTERP, src, CONST_STRING(INTERP, "hash"))){

            PMC *iter = VTABLE_get_iter(INTERP, src);
            while (VTABLE_get_bool(INTERP, iter)) {
                PMC    *key        = VTABLE_shift_pmc(INTERP, iter);
                PMC    *value_copy = VTABLE_get_pmc_keyed(INTERP, src, key);                
                SELF.set_pmc_keyed(key, value_copy);
            }
        }
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                    EXCEPTION_PARROT_USAGE_ERROR,
                    "can't add a non-aggregate PMC to a PhpArray");
    }

/*

=item C<INTVAL is_equal(PMC *other)>

Return true if C<SELF> and C<other> contain the same key/value pairs and have
the same number of elements.  Order is not important.

=cut

*/

    VTABLE INTVAL is_equal(PMC *other) {
        return !Parrot_PhpArray_cmp(INTERP, SELF, other);
    }

/*

=item C<INTVAL is_equal_num(PMC *other)>

Determine equality between a PHPArray and a number.  PHP's documentation says
that an array is always greater than a number, so this function returns 0.
See http://us.php.net/manual/en/language.operators.comparison.php .

=cut

*/

    VTABLE INTVAL is_equal_num(PMC *other) {
        return 0;
    }

/*

=item C<INTVAL is_equal_string(PMC *other)>

Determine equality between a PHPArray and a string.  PHP's documentation says
that an array is always greater than a string, so this function returns 0.
See http://us.php.net/manual/en/language.operators.comparison.php .

=cut

*/

    VTABLE INTVAL is_equal_string(PMC *other) {
        return 0;
    }

/*

=item C<INTVAL is_same(PMC *other)>

Return true if C<SELF> and C<other> point to the same place in memory.

=cut

*/

    VTABLE INTVAL is_same(PMC *other) {
        return SELF == other;
    }

/*

=item C<INTVAL cmp(PMC *other)>

Compare C<SELF> to C<other>.  A PHPArray with fewer elements is always
considered to be less than one with more elements.  Two PHPArrays of the same
size are comparable if they have the same keys.  In this case, C<a> > C<b> if
the first unequal value of C<a> is greater, according to the internal ordering
of C<a>.  This means it's possible for both C<a> > C<b> and C<b> > C<a> to be
true.

If the arrays are comparable and C<SELF> is larger, cmp returns 1.  If they're
equal, cmp returns 0.  If C<other> is larger, cmp returns -1.

If C<SELF> and the other PMC are not comparable, an exception is thrown.  This
is to allow the PHP implementation to return null for a comparison between two
non-comparable PHPArrays.

=cut

*/

    VTABLE INTVAL cmp(PMC *other) {
/** TODO: IMPLEMENT
        PippBucket    *my_bkt;
        PippHashTable *my_ht;

        GET_ATTR_hash_table(INTERP, SELF, my_ht);

        if (PMC_type(SELF) == PMC_type(other)) {

            PippHashTable *other_ht;

            GET_ATTR_hash_table(INTERP, other, other_ht);

            if (SELF == other)
                return 0;

            if (my_ht->elementCount != other_ht->elementCount)
                return my_ht->elementCount > other_ht->elementCount ? 1 : -1;

            for (my_bkt = my_ht->tableHead; my_bkt != NULL; my_bkt = my_bkt->tableNext) {

                INTVAL cmp;
                PippBucket *other_bkt = pipp_hash_get_bucket(INTERP, other_ht, my_bkt->key);

                if (other_bkt == NULL)
                    Parrot_ex_throw_from_c_args(INTERP, NULL, 1, "non-comparable PhpArrays");

                cmp = VTABLE_cmp(INTERP, my_bkt->value, other_bkt->value);

                if (cmp)
                    return cmp;
            }
            return 0;
        }
        else if (VTABLE_does(INTERP, other, CONST_STRING(INTERP, "array")) ||
                 VTABLE_does(INTERP, other, CONST_STRING(INTERP, "hash"))) {

            PMC    *other_value;
            STRING *other_key;
            INTVAL  cmp;
            PMC    *iter = VTABLE_get_iter(INTERP, other);

            while (VTABLE_get_bool(INTERP, iter)) {

                other_key = VTABLE_shift_string(INTERP, iter);
                my_bkt    = pipp_hash_get_bucket(INTERP, my_ht, other_key);

                if (my_bkt == NULL)
                    Parrot_ex_throw_from_c_args(INTERP, NULL, 1,
                            "this PhpArray is non-comparable with this %Ss",
                            VTABLE_name(INTERP, other));

                other_value = VTABLE_get_pmc_keyed_str(INTERP, other, other_key);
                cmp = VTABLE_cmp(INTERP, my_bkt->value, other_value);

                if (cmp != 0)
                    return cmp;
            }
            return 0;
        }
        else
            Parrot_ex_throw_from_c_args(INTERP, NULL,
                    EXCEPTION_PARROT_USAGE_ERROR,
                   "can't assign a non-aggregate PMC to a PhpArray");
**/
    }

/*

=item C<INTVAL cmp_num(PMC *other)>

In PHP, arrays are always greater than numeric types.  This function always
returns 1.

=cut

*/

    VTABLE INTVAL cmp_num(PMC *other) {
        return 1;
    }


/*

=item C<INTVAL cmp_string(PMC *other)>

In PHP, arrays are always greater than strings.  This function always returns
1.

=cut

*/

    VTABLE INTVAL cmp_string(PMC *other) {
        return 1;
    }
/*

=back

=head2 Methods

=over 4

=item C<METHOD void next()>

Advance the internal pointer to the next element.  This method emulates the
behavior of PHP's C<next()> function.

=cut

*/
    METHOD next() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: MOVE THIS TO THE ITERATOR! **/
        PMC *iter, *ret;
        GET_ATTR_ptr(INTERP, SELF, iter);
        ret = VTABLE_shift_pmc(INTERP, iter);
        RETURN(void);
    }

/*

=item C<METHOD void prev()>

Move the internal pointer to the previous element.  This method emulates the
behavior of PHP's C<prev()> function.

=cut

*/
    METHOD prev() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: IMPLEMENT THIS - Good luck! **/
/** TODO: MOVE THIS TO THE ITERATOR! **/
        RETURN(void);
    }

/*

=item C<METHOD void reset()>

Move the internal pointer to the first element of this PhpArray, according to
insertion order.  This method emulates the behavior of PHP's C<reset()>
function.

=cut

*/
    METHOD reset() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: MOVE THIS TO THE ITERATOR! **/
        PMC *iter;
        GET_ATTR_ptr(INTERP, SELF, iter);
        VTABLE_set_integer_native(INTERP, iter, ITERATE_FROM_START);
        RETURN(void);
    }

/*

=item C<METHOD void end()>

Move the internal pointer to the last element of this PhpArray, according to
insertion order.  This method emulates the behavior of PHP's C<end()> function.

=cut

*/
    METHOD end() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: IMPLEMENT THIS - Good luck! **/
/** TODO: MOVE THIS TO THE ITERATOR! **/

    }

/*

=item C<METHOD STRING* key()>

Return the key of the element pointed to by the internal pointer.  If the
internal pointer does not point at a valid element, the empty string is
returned.  This method has no side-effects and does not modify the internal
pointer.

=cut

*/
    METHOD key() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: IMPLEMENT THIS - Good luck! **/
/** TODO: MOVE THIS TO THE ITERATOR! **/
        STRING        *s_key;
        s_key = CONST_STRING(INTERP, "");

        RETURN(STRING *s_key);
    }

/*

=item C<METHOD PMC* current()>

Return a clone of value of the element pointed to by the internal pointer.  If
the internal pointer does not point at a valid element, PMCNULL is returned.
This method has no side-effects and does not modify the internal pointer.

=cut

*/
    METHOD current() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: IMPLEMENT THIS - Good luck! **/
/** TODO: MOVE THIS TO THE ITERATOR! **/
        PMC           *p_val;
        p_val = PMCNULL;

        RETURN(PMC *p_val);
    }

/*

=item C<METHOD PMC* each()>

Return a PhpArray containing the key/value pair pointed to by the internal
pointer, then advance the internal pointer to the next pair.  The returned
PhpArray has the following key/value pairs, in this order:

=over 4

=item * 1       => value

=item * "value" => value

=item * 0       => key

=item * "key"   => key

=back

where C<key> and C<value> are the key and value from this PhpArray.  If the
internal pointer does not point to a valid element, a PhpBoolean C<false> will
be returned.

=cut

*/
    METHOD each() {
/** TODO: THIS METHOD CLASHES WITH PHP BEHAVIOR!!! IT SHOULD RETURN THE VALUE OF THE NEW ARRAY POSITION **/
/** TODO: IMPLEMENT THIS - Good luck! **/
/** TODO: MOVE THIS TO THE ITERATOR!
        PMC           *keys, *p_val, *p_key;
        STRING        *s_key;
        PippHashTable *ht;

        GET_ATTR_hash_table(INTERP, SELF, ht);

        if (ht->internalPointer != NULL) {

            PippHashTable *keys_ht;

            p_val = ht->internalPointer->value;
            s_key = ht->internalPointer->key;
            p_key = pmc_new(INTERP, enum_class_String);
            VTABLE_set_string_native(INTERP, p_key, s_key);

            keys = pmc_new(INTERP, PMC_type(SELF));
            GET_ATTR_hash_table(INTERP, keys, keys_ht);
            pipp_hash_put(INTERP, keys_ht, CONST_STRING(INTERP, "1"), VTABLE_clone(INTERP, p_val));
            pipp_hash_put(INTERP, keys_ht, CONST_STRING(INTERP, "value"), p_val);
            pipp_hash_put(INTERP, keys_ht, CONST_STRING(INTERP, "0"), VTABLE_clone(INTERP, p_key));
            pipp_hash_put(INTERP, keys_ht, CONST_STRING(INTERP, "key"), p_key);

            ht->internalPointer = ht->internalPointer->tableNext;
            if (ht->iter) {
                PMC    *key;
                STRING *get_key = CONST_STRING(INTERP, "get_key");

                Parrot_PCCINVOKE(INTERP, ht->iter, get_key, "->P", &key);
                VTABLE_nextkey_keyed(INTERP, key, SELF, ITERATE_GET_NEXT);
            }

        }
        else {**/
        PMC *keys;
            keys = Parrot_pmc_new(INTERP, dynpmc_PhpBoolean);
            VTABLE_set_integer_native(INTERP, keys, 0);
        RETURN(PMC *keys);
    }

/*



=item C<PMC* to_number()>

=cut

*/
    METHOD to_number() {
        RETURN(PMC *SELF);
    }

/*

=item C<METHOD void sanity_check()>

Check if everything about the PippHashTable looks sane.  If anything looks
broken, the code will throw an exception.

=cut

*/
    METHOD sanity_check() {

    }

/*

=back

=head1 AUTHORS

=over 4

=item Remi Woler <remi@wolerized.com>

=back

=cut

*/
}

/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=4:
 */
