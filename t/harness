#! perl

=head1 NAME

languages/pipp/t/harness - A harness for Pipp

=head1 SYNOPSIS

  perl t/harness

  perl t/harness --with-phc

  perl t/harness --with-pct

  perl t/harness --verbose t/hello.t

=head1 DESCRIPTION

If I'm called with no args, I run the complete suite.

Otherwise I run the tests that were passed on the command line.
The options C<--with-pct> and C<--with-phc> select
the variant of Pipp. Default is the PCT variant, using the
Parrot Compiler Toolkit.

=cut

# pragmata
use strict;
use warnings;
use FindBin ();
use lib "$FindBin::Bin/../../../lib", "$FindBin::Bin/../lib", "$FindBin::Bin/../parrot/lib";

use Cwd                     ();
use File::Spec              ();
use TAP::Harness            3.12;     # support closures for the 'exec' option
use TAP::Harness::Archive   0.12;
use Getopt::Long;
use Parrot::Harness::Smoke;

my ( $send_to_smolder_flag, $archive_flag, $verbose_flag );
my ( $php_flag, $pct_flag, $phc_flag);
GetOptions(
    'send-to-smolder' => \$send_to_smolder_flag,
    'archive'         => \$archive_flag,
    'verbose'         => \$verbose_flag,
    'with-pct'        => \$pct_flag,
    'with-phc'        => \$phc_flag,
    'with-php'        => \$php_flag,
);

my $hll = 'pipp';
my $verbosity = $verbose_flag ? 1 : $ENV{HARNESS_VERBOSE};
$verbosity ||= 0;

{
    my @php_cmd;
    if    ( $php_flag ) { @php_cmd = qw{ php-cgi -q -C -n } ; }
    elsif ( $phc_flag ) { @php_cmd = ( './pipp', '--variant=phc' ); }
    else                { @php_cmd = ( './pipp' ) }

    my @pir_cmd = ( './pipp',  '--run-pir' );

    my @files;
    if ( scalar(@ARGV) ) {
        # Someone specified tests for me to run.
        @files = grep { -f $_ } @ARGV
    }
    else {
        ( undef, undef, my $current_dir ) = File::Spec->splitpath( Cwd::getcwd() );
        if ( $current_dir eq $hll ) {
            @files = glob( File::Spec->catfile( 't', '*/*.t' ) );
        }
        else {
            die "Where am I?";
        }
    }

    my $exec_sub
        = sub {
              my ( $harness, $test_file ) = @_;

              # the directory t/embed contains only PIR test files
              return [ @pir_cmd, '--run-pir', $test_file ] if $test_file =~ m!t/embed/.*[.]t$!;

              # the directory t/pmc contains only PIR test files
              return [ @pir_cmd, $test_file ]              if $test_file =~ m!t/pmc/.*[.]t$!;

              # the directory t/in_php contains only test scripts written in PHP
              return [ @php_cmd, $test_file ]              if $test_file =~ m!t/in_php/.*[.]t$!;

              # all other directories contain test scripts written in Perl
              return [ $^X, $test_file ];
          };
    if ( $archive_flag ) {
        my %env_data = Parrot::Harness::Smoke::collect_test_environment_data();

        my $report_file = ['pipp_test_run.tar.gz'];
        my $harness = TAP::Harness::Archive->new(
            {
                exec             => $exec_sub,
                verbosity        => $verbosity,
                archive          => $report_file->[0],
                merge            => 1,
                extra_properties => \%env_data,
            }
        );
        $harness->runtests(@files);

        if ( $send_to_smolder_flag ) {
            $env_data{report_file} = $report_file;
            $env_data{project_id}  = 10;
            Parrot::Harness::Smoke::send_archive_to_smolder(%env_data);
        }
    }
    else {
       my $harness = TAP::Harness->new(
           {
               exec       => $exec_sub,
               verbosity  => $verbosity,
           }
       );
        $harness->runtests(@files);
    }
}

sub path_to_parrot {

    my $path = $INC{'Parrot/Config.pm'};
    $path =~ s{ /lib/Parrot/Config.pm \z}{}xms;

    return Cwd::realpath( $path );
}

=head1 SEE ALSO

  F<languages/perl6/t/harness>

=head1 AUTHOR

Bernhard Schmalhofer - <Bernhard.Schmalhofer@gmx.de>

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 100
# End:
# vim: expandtab shiftwidth=4:
